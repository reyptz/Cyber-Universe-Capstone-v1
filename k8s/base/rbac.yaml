# RBAC sécurisé pour Ghost Cyber Universe
# Principe du moindre privilège

---
# ServiceAccount pour l'application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ghost-cyber-universe-sa
  namespace: ghost-cyber-universe
  labels:
    app: ghost-cyber-universe
    security-level: high
  annotations:
    security.ghost-cyber-universe.com/automount-token: "false"
---
# Role avec permissions minimales
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ghost-cyber-universe-role
  namespace: ghost-cyber-universe
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
  resourceNames: ["ghost-cyber-universe-config", "ghost-cyber-universe-secrets"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list"]
---
# RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ghost-cyber-universe-rolebinding
  namespace: ghost-cyber-universe
subjects:
- kind: ServiceAccount
  name: ghost-cyber-universe-sa
  namespace: ghost-cyber-universe
roleRef:
  kind: Role
  name: ghost-cyber-universe-role
  apiGroup: rbac.authorization.k8s.io
---
# ClusterRole pour les métriques (lecture seule)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ghost-cyber-universe-metrics-reader
rules:
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["get", "list"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]
---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ghost-cyber-universe-metrics-reader
subjects:
- kind: ServiceAccount
  name: ghost-cyber-universe-sa
  namespace: ghost-cyber-universe
roleRef:
  kind: ClusterRole
  name: ghost-cyber-universe-metrics-reader
  apiGroup: rbac.authorization.k8s.io
---
# NetworkPolicy pour l'isolation réseau
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ghost-cyber-universe-netpol
  namespace: ghost-cyber-universe
spec:
  podSelector:
    matchLabels:
      app: ghost-cyber-universe
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: ghost-cyber-universe
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
---
# PodSecurityPolicy (si supporté)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: ghost-cyber-universe-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
---
# ClusterRole pour PSP
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ghost-cyber-universe-psp-user
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - ghost-cyber-universe-psp
---
# ClusterRoleBinding pour PSP
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ghost-cyber-universe-psp-user
subjects:
- kind: ServiceAccount
  name: ghost-cyber-universe-sa
  namespace: ghost-cyber-universe
roleRef:
  kind: ClusterRole
  name: ghost-cyber-universe-psp-user
  apiGroup: rbac.authorization.k8s.io
