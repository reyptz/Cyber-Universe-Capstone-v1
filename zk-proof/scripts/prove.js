const fs = require('fs');
const path = require('path');
const snarkjs = require('snarkjs');

// Fonction pour convertir une cha√Æne en nombre pour Poseidon
function stringToFieldElement(str) {
    // Convertir la cha√Æne en bytes puis en nombre
    const bytes = Buffer.from(str, 'utf8');
    let result = BigInt(0);
    for (let i = 0; i < Math.min(bytes.length, 31); i++) {
        result = result * BigInt(256) + BigInt(bytes[i]);
    }
    return result.toString();
}

// Fonction pour calculer le hash Poseidon d'un mot de passe
async function calculatePoseidonHash(password) {
    const passwordField = stringToFieldElement(password);
    const hash = await snarkjs.poseidon([passwordField]);
    return hash.toString();
}

async function generateAndVerifyProof() {
    console.log('üéØ D√©monstration ZK-SNARK - Preuve de Mot de Passe\\n');
    
    try {
        // Param√®tres de d√©monstration
        const password = 'cybersec2024';
        console.log('=== G√©n√©ration de Preuve ZK-SNARK ===');
        console.log(`Mot de passe (secret): ${password}`);
        
        // Calculer le hash attendu
        const expectedHash = await calculatePoseidonHash(password);
        console.log(`Hash attendu (public): ${expectedHash.substring(0, 5)}...\\n`);
        
        // Pr√©parer les entr√©es du circuit
        const input = {
            password: stringToFieldElement(password),
            expectedHash: expectedHash
        };
        
        // Chemins des fichiers
        const buildDir = path.join(__dirname, '..', 'build');
        const wasmPath = path.join(buildDir, 'password_verification_js', 'password_verification.wasm');
        const zkeyPath = path.join(buildDir, 'password_verification_final.zkey');
        const vkeyPath = path.join(buildDir, 'verification_key.json');
        
        // V√©rifier que les fichiers existent
        if (!fs.existsSync(wasmPath)) {
            throw new Error('Fichier WASM non trouv√©. Ex√©cutez d\'abord \'npm run setup\'');
        }
        
        // √âtape 1: G√©n√©rer le t√©moin
        console.log('‚öôÔ∏è  G√©n√©ration du t√©moin...');
        const { witness } = await snarkjs.groth16.fullProve(input, wasmPath, zkeyPath);
        console.log('‚úÖ T√©moin g√©n√©r√©');
        
        // √âtape 2: G√©n√©rer la preuve
        console.log('üîê G√©n√©ration de la preuve ZK-SNARK...');
        const { proof, publicSignals } = await snarkjs.groth16.fullProve(input, wasmPath, zkeyPath);
        console.log('‚úÖ Preuve g√©n√©r√©e');
        
        // Sauvegarder la preuve
        const proofPath = path.join(__dirname, '..', 'proof.json');
        const publicPath = path.join(__dirname, '..', 'public.json');
        
        fs.writeFileSync(proofPath, JSON.stringify(proof, null, 2));
        fs.writeFileSync(publicPath, JSON.stringify(publicSignals, null, 2));
        console.log('‚úÖ Preuve sauvegard√©e\\n');
        
        // √âtape 3: V√©rifier la preuve
        console.log('=== V√©rification de la Preuve ===');
        
        // Charger la cl√© de v√©rification
        const vKey = JSON.parse(fs.readFileSync(vkeyPath));
        
        // V√©rifier la preuve
        const isValid = await snarkjs.groth16.verify(vKey, publicSignals, proof);
        
        if (isValid) {
            console.log('‚úÖ PREUVE VALIDE - Le mot de passe est correct!');
            console.log('üîí Le secret n\'a jamais √©t√© r√©v√©l√©');
        } else {
            console.log('‚ùå PREUVE INVALIDE - Le mot de passe est incorrect!');
        }
        
        console.log('\\nüìä D√©tails de la preuve:');
        console.log(`   - Signal public (isValid): ${publicSignals[0]}`);
        console.log(`   - Taille de la preuve: ${JSON.stringify(proof).length} bytes`);
        console.log(`   - Hash utilis√©: ${expectedHash}`);
        
        return isValid;
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la g√©n√©ration/v√©rification:', error.message);
        process.exit(1);
    }
}

// Fonction pour tester avec un mauvais mot de passe
async function testInvalidPassword() {
    console.log('\\nüß™ Test avec un mot de passe incorrect...');
    
    try {
        const wrongPassword = 'wrongpassword';
        const correctHash = await calculatePoseidonHash('cybersec2024');
        
        const input = {
            password: stringToFieldElement(wrongPassword),
            expectedHash: correctHash
        };
        
        const buildDir = path.join(__dirname, '..', 'build');
        const wasmPath = path.join(buildDir, 'password_verification_js', 'password_verification.wasm');
        const zkeyPath = path.join(buildDir, 'password_verification_final.zkey');
        const vkeyPath = path.join(buildDir, 'verification_key.json');
        
        const { proof, publicSignals } = await snarkjs.groth16.fullProve(input, wasmPath, zkeyPath);
        const vKey = JSON.parse(fs.readFileSync(vkeyPath));
        const isValid = await snarkjs.groth16.verify(vKey, publicSignals, proof);
        
        console.log(`Signal de sortie: ${publicSignals[0]} (0 = invalide, 1 = valide)`);
        console.log(isValid ? '‚úÖ Preuve techniquement valide mais mot de passe incorrect' : '‚ùå Preuve invalide');
        
    } catch (error) {
        console.error('Erreur lors du test:', error.message);
    }
}

// Ex√©cuter la d√©monstration si ce script est appel√© directement
if (require.main === module) {
    generateAndVerifyProof()
        .then(() => testInvalidPassword())
        .catch(console.error);
}

module.exports = { generateAndVerifyProof, calculatePoseidonHash };