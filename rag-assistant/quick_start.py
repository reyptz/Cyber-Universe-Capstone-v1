#!/usr/bin/env python3
"""
Script de d√©marrage rapide pour l'assistant RAG s√©curis√©
"""
import os
import sys
import subprocess
import time
import logging
from pathlib import Path

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_python_version():
    """V√©rifie la version de Python"""
    if sys.version_info < (3, 8):
        logger.error("Python 3.8 ou sup√©rieur est requis")
        sys.exit(1)
    logger.info(f"‚úÖ Python {sys.version.split()[0]} d√©tect√©")

def check_dependencies():
    """V√©rifie les d√©pendances principales"""
    required_packages = [
        'fastapi', 'uvicorn', 'langchain', 'transformers', 
        'spacy', 'presidio-analyzer', 'cryptography'
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            logger.info(f"‚úÖ {package} install√©")
        except ImportError:
            missing_packages.append(package)
            logger.warning(f"‚ùå {package} manquant")
    
    if missing_packages:
        logger.error(f"Packages manquants: {', '.join(missing_packages)}")
        logger.info("Ex√©cutez: pip install -r requirements.txt")
        return False
    
    return True

def install_spacy_models():
    """Installe les mod√®les spaCy n√©cessaires"""
    models = ['fr_core_news_sm', 'en_core_web_sm']
    
    for model in models:
        try:
            import spacy
            spacy.load(model)
            logger.info(f"‚úÖ Mod√®le spaCy {model} install√©")
        except OSError:
            logger.info(f"üì• Installation du mod√®le spaCy {model}...")
            try:
                subprocess.run([sys.executable, '-m', 'spacy', 'download', model], 
                             check=True, capture_output=True)
                logger.info(f"‚úÖ Mod√®le spaCy {model} install√©")
            except subprocess.CalledProcessError as e:
                logger.error(f"‚ùå Erreur lors de l'installation de {model}: {e}")
                return False
    
    return True

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires"""
    directories = ['logs', 'chroma_db', 'security_cache', 'monitoring']
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        logger.info(f"‚úÖ R√©pertoire cr√©√©: {directory}")

def create_env_file():
    """Cr√©e le fichier .env s'il n'existe pas"""
    env_file = Path('.env')
    if not env_file.exists():
        logger.info("üìù Cr√©ation du fichier .env...")
        with open(env_file, 'w') as f:
            f.write("# Configuration d'environnement pour l'assistant RAG s√©curis√©\n")
            f.write("OPENAI_API_KEY=your_openai_api_key_here\n")
            f.write("ENCRYPTION_KEY=your_encryption_key_here\n")
            f.write("JWT_SECRET_KEY=your_jwt_secret_key_here\n")
            f.write("LOG_LEVEL=INFO\n")
            f.write("API_HOST=0.0.0.0\n")
            f.write("API_PORT=8000\n")
        logger.info("‚úÖ Fichier .env cr√©√©")
        logger.warning("‚ö†Ô∏è Veuillez configurer vos cl√©s API dans le fichier .env")
    else:
        logger.info("‚úÖ Fichier .env existant")

def run_security_tests():
    """Ex√©cute les tests de s√©curit√©"""
    logger.info("üß™ Ex√©cution des tests de s√©curit√©...")
    try:
        result = subprocess.run([sys.executable, 'test_security.py'], 
                              capture_output=True, text=True, timeout=300)
        if result.returncode == 0:
            logger.info("‚úÖ Tests de s√©curit√© r√©ussis")
            return True
        else:
            logger.warning("‚ö†Ô∏è Certains tests de s√©curit√© ont √©chou√©")
            logger.warning(f"Sortie: {result.stdout}")
            return False
    except subprocess.TimeoutExpired:
        logger.warning("‚ö†Ô∏è Tests de s√©curit√© interrompus (timeout)")
        return False
    except Exception as e:
        logger.error(f"‚ùå Erreur lors des tests de s√©curit√©: {e}")
        return False

def start_server():
    """D√©marre le serveur"""
    logger.info("üöÄ D√©marrage du serveur...")
    try:
        # V√©rifier si le serveur est d√©j√† en cours d'ex√©cution
        import requests
        try:
            response = requests.get("http://localhost:8000/health", timeout=5)
            if response.status_code == 200:
                logger.info("‚úÖ Serveur d√©j√† en cours d'ex√©cution")
                return True
        except:
            pass
        
        # D√©marrer le serveur
        logger.info("üåê Serveur d√©marr√© sur http://localhost:8000")
        logger.info("üìö Documentation API: http://localhost:8000/docs")
        logger.info("üîç Tests d'API: test_main.http")
        logger.info("‚èπÔ∏è Appuyez sur Ctrl+C pour arr√™ter")
        
        subprocess.run([sys.executable, 'main.py'])
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Serveur arr√™t√© par l'utilisateur")
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du d√©marrage du serveur: {e}")
        return False
    
    return True

def show_help():
    """Affiche l'aide"""
    print("""
üõ°Ô∏è Assistant RAG S√©curis√© - PME Mali
=====================================

Usage: python quick_start.py [COMMAND]

Commands:
  install     Installe les d√©pendances et configure l'environnement
  test        Ex√©cute les tests de s√©curit√©
  start       D√©marre le serveur
  full        Installation compl√®te + tests + d√©marrage
  help        Affiche cette aide

Exemples:
  python quick_start.py install    # Installation des d√©pendances
  python quick_start.py test       # Tests de s√©curit√©
  python quick_start.py start      # D√©marrage du serveur
  python quick_start.py full       # Installation compl√®te

Fonctionnalit√©s de s√©curit√©:
  ‚úÖ Filtrage PII et anonymisation
  ‚úÖ Mod√©ration de contenu
  ‚úÖ D√©tection d'injection de prompts
  ‚úÖ D√©tection de secrets
  ‚úÖ S√©curit√© des embeddings
  ‚úÖ Surveillance adversarial
  ‚úÖ Gouvernance des risques
  ‚úÖ Tests de s√©curit√© automatis√©s

Pour plus d'informations, consultez le README.md
""")

def main():
    """Fonction principale"""
    if len(sys.argv) < 2:
        show_help()
        return
    
    command = sys.argv[1].lower()
    
    if command == "help" or command == "-h" or command == "--help":
        show_help()
        return
    
    logger.info("üõ°Ô∏è Assistant RAG S√©curis√© - PME Mali")
    logger.info("=" * 50)
    
    if command == "install":
        logger.info("üì¶ Installation des d√©pendances...")
        check_python_version()
        if not check_dependencies():
            logger.error("‚ùå Installation √©chou√©e")
            sys.exit(1)
        if not install_spacy_models():
            logger.error("‚ùå Installation des mod√®les spaCy √©chou√©e")
            sys.exit(1)
        create_directories()
        create_env_file()
        logger.info("‚úÖ Installation termin√©e")
    
    elif command == "test":
        logger.info("üß™ Ex√©cution des tests de s√©curit√©...")
        if not run_security_tests():
            logger.warning("‚ö†Ô∏è Tests termin√©s avec des avertissements")
    
    elif command == "start":
        logger.info("üöÄ D√©marrage du serveur...")
        if not start_server():
            logger.error("‚ùå D√©marrage √©chou√©")
            sys.exit(1)
    
    elif command == "full":
        logger.info("üîÑ Installation compl√®te...")
        check_python_version()
        if not check_dependencies():
            logger.error("‚ùå Installation √©chou√©e")
            sys.exit(1)
        if not install_spacy_models():
            logger.error("‚ùå Installation des mod√®les spaCy √©chou√©e")
            sys.exit(1)
        create_directories()
        create_env_file()
        
        logger.info("üß™ Ex√©cution des tests de s√©curit√©...")
        run_security_tests()
        
        logger.info("üöÄ D√©marrage du serveur...")
        start_server()
    
    else:
        logger.error(f"‚ùå Commande inconnue: {command}")
        show_help()
        sys.exit(1)

if __name__ == "__main__":
    main()
