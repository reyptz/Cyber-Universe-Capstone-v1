#!/usr/bin/env python3
"""
Script de d√©marrage pour l'assistant RAG s√©curis√©
"""
import os
import sys
import logging
import subprocess
from pathlib import Path

def setup_logging():
    """Configure le logging"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('rag_assistant.log')
        ]
    )

def check_dependencies():
    """V√©rifie les d√©pendances requises"""
    logger = logging.getLogger(__name__)
    
    try:
        import fastapi
        import langchain
        import transformers
        import spacy
        import presidio_analyzer
        logger.info("‚úÖ Toutes les d√©pendances principales sont install√©es")
        return True
    except ImportError as e:
        logger.error(f"‚ùå D√©pendance manquante: {e}")
        logger.error("Veuillez installer les d√©pendances avec: pip install -r requirements.txt")
        return False

def check_spacy_models():
    """V√©rifie les mod√®les spaCy"""
    logger = logging.getLogger(__name__)
    
    try:
        import spacy
        
        # V√©rifier le mod√®le fran√ßais
        try:
            spacy.load("fr_core_news_sm")
            logger.info("‚úÖ Mod√®le spaCy fran√ßais install√©")
        except OSError:
            logger.warning("‚ö†Ô∏è Mod√®le spaCy fran√ßais non trouv√©")
            logger.info("Installation: python -m spacy download fr_core_news_sm")
        
        # V√©rifier le mod√®le anglais
        try:
            spacy.load("en_core_web_sm")
            logger.info("‚úÖ Mod√®le spaCy anglais install√©")
        except OSError:
            logger.warning("‚ö†Ô∏è Mod√®le spaCy anglais non trouv√©")
            logger.info("Installation: python -m spacy download en_core_web_sm")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification des mod√®les spaCy: {e}")
        return False

def check_environment():
    """V√©rifie la configuration de l'environnement"""
    logger = logging.getLogger(__name__)
    
    # V√©rifier les variables d'environnement importantes
    openai_key = os.getenv("OPENAI_API_KEY")
    if openai_key:
        logger.info("‚úÖ Cl√© API OpenAI configur√©e")
    else:
        logger.warning("‚ö†Ô∏è Cl√© API OpenAI non configur√©e (optionnelle)")
    
    # V√©rifier les fichiers de configuration
    config_files = ["config.py", "main.py", "rag_chain.py"]
    for file in config_files:
        if Path(file).exists():
            logger.info(f"‚úÖ Fichier de configuration trouv√©: {file}")
        else:
            logger.error(f"‚ùå Fichier de configuration manquant: {file}")
            return False
    
    return True

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires"""
    logger = logging.getLogger(__name__)
    
    directories = ["logs", "chroma_db", "security_cache"]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        logger.info(f"‚úÖ R√©pertoire cr√©√©/v√©rifi√©: {directory}")

def run_security_tests():
    """Ex√©cute les tests de s√©curit√©"""
    logger = logging.getLogger(__name__)
    
    logger.info("üß™ Ex√©cution des tests de s√©curit√©...")
    
    try:
        # Import et ex√©cution des tests
        from .test.test_security import run_all_tests
        results = run_all_tests()
        
        # V√©rifier les r√©sultats
        passed = sum(1 for success in results.values() if success)
        total = len(results)
        
        if passed == total:
            logger.info("‚úÖ Tous les tests de s√©curit√© sont pass√©s")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è {total - passed} test(s) ont √©chou√©")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution des tests: {e}")
        return False

def start_server():
    """D√©marre le serveur FastAPI"""
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ D√©marrage du serveur FastAPI...")
    
    try:
        import uvicorn
        from .app.api.main import app
        
        # Configuration du serveur
        host = os.getenv("API_HOST", "0.0.0.0")
        port = int(os.getenv("API_PORT", "8000"))
        workers = int(os.getenv("API_WORKERS", "1"))
        
        logger.info(f"üåê Serveur d√©marr√© sur http://{host}:{port}")
        logger.info("üìö Documentation API disponible sur http://localhost:8000/docs")
        logger.info("üîç Tests d'API disponibles dans test_main.http")
        
        # D√©marrage du serveur
        uvicorn.run(
            app,
            host=host,
            port=port,
            workers=workers,
            log_level="info"
        )
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du d√©marrage du serveur: {e}")
        return False

def main():
    """Fonction principale"""
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("üõ°Ô∏è Assistant RAG S√©curis√© - PME Mali")
    logger.info("=" * 50)
    
    # V√©rifications pr√©liminaires
    logger.info("üîç V√©rification des pr√©requis...")
    
    if not check_dependencies():
        sys.exit(1)
    
    if not check_spacy_models():
        logger.warning("‚ö†Ô∏è Certains mod√®les spaCy sont manquants, mais le syst√®me peut fonctionner")
    
    if not check_environment():
        sys.exit(1)
    
    # Cr√©ation des r√©pertoires
    create_directories()
    
    # Tests de s√©curit√© (optionnels)
    run_tests = os.getenv("RUN_SECURITY_TESTS", "true").lower() == "true"
    if run_tests:
        if not run_security_tests():
            logger.warning("‚ö†Ô∏è Certains tests de s√©curit√© ont √©chou√©, mais le serveur peut d√©marrer")
    else:
        logger.info("‚è≠Ô∏è Tests de s√©curit√© ignor√©s")
    
    # D√©marrage du serveur
    logger.info("üéØ Toutes les v√©rifications sont termin√©es")
    start_server()

if __name__ == "__main__":
    main()
