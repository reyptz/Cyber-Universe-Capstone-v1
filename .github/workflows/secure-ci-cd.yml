name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Scan quotidien Ã  2h

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghost-cyber-universe

jobs:
  # SAST - Static Application Security Testing
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history pour gitleaks
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Semgrep
      run: |
        pip install semgrep
        semgrep --version
    
    - name: Run Semgrep SAST
      run: |
        semgrep --config=auto \
          --json \
          --output=semgrep-results.json \
          --severity=ERROR \
          --severity=WARNING \
          .
      continue-on-error: true
    
    - name: Upload Semgrep results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: semgrep-results
        path: semgrep-results.json
    
    - name: Run Bandit (Python)
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-results.json
      continue-on-error: true
    
    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-results
        path: bandit-results.json

  # SCA - Software Composition Analysis
  sca:
    name: SCA Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Safety (Python dependencies)
      run: |
        pip install safety
        safety check --json --output safety-results.json
      continue-on-error: true
    
    - name: Upload Safety results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-results
        path: safety-results.json

  # IaC - Infrastructure as Code Security
  iac:
    name: IaC Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: 'infra/'
        soft_fail: true
    
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: 'infra/'
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
    
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'checkov-results.sarif'

  # Secrets Detection
  secrets:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Container Security
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: [sast, sca]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags:
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
    
    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'
    
    - name: Sign image with Cosign
      uses: sigstore/cosign-installer@v3.6.0
      with:
        cosign-release: 'v2.2.1'
    
    - name: Sign the images
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ github.repository }}@${{ steps.build.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: 1

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [sast, sca, secrets]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit safety
    
    - name: Run security tests
      run: |
        python -m pytest tests/security/ -v --cov=src --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: security
        name: security-tests

  # DAST - Dynamic Application Security Testing
  dast:
    name: DAST Testing
    runs-on: ubuntu-latest
    needs: [container-security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup OWASP ZAP
      run: |
        docker pull owasp/zap2docker-stable
    
    - name: Run ZAP Baseline Scan
      run: |
        docker run -t owasp/zap2docker-stable zap-baseline.py \
          -t http://localhost:8080 \
          -J zap-report.json \
          -x zap-report.xml
      continue-on-error: true
    
    - name: Upload ZAP results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: zap-results
        path: zap-report.json

  # Security Report
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [sast, sca, iac, secrets, container-security, security-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate security report
      run: |
        python devsecops/scripts/generate_security_report.py \
          --semgrep semgrep-results/semgrep-results.json \
          --bandit bandit-results/bandit-results.json \
          --trivy trivy-results.sarif \
          --safety safety-results/safety-results.json \
          --checkov checkov-results.sarif \
          --output security-report.json
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json
    
    - name: Comment PR with security report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
          
          const comment = `## Security Scan Report
          
          ### Summary
          - **Total Issues**: ${report.summary.total_issues}
          - **Critical**: ${report.summary.critical}
          - **High**: ${report.summary.high}
          - **Medium**: ${report.summary.medium}
          - **Low**: ${report.summary.low}
          
          ### Security Score: ${report.security_score}/100
          
          ${report.recommendations.map(r => `- ${r}`).join('\n')}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-report]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/base/
        kubectl apply -k k8s/overlays/staging/
    
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/ghost-cyber-universe -n staging --timeout=300s
    
    - name: Run smoke tests
      run: |
        kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://ghost-cyber-universe-staging.default.svc.cluster.local/health

  # SLSA Attestation
  slsa-attestation:
    name: SLSA Attestation
    runs-on: ubuntu-latest
    needs: [container-security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Generate SLSA provenance
      uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
      with:
        image-name: ${{ env.REGISTRY }}/${{ github.repository }}
        image-digest: ${{ needs.container-security.outputs.digest }}
        registry-username: ${{ github.actor }}
        registry-password: ${{ secrets.GITHUB_TOKEN }}
        tags: ${{ github.sha }}
