name: Defensive Intelligence Platform CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'defensive-ops/**'
  pull_request:
    branches: [main]
    paths:
      - 'defensive-ops/**'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  RUST_VERSION: '1.75'

jobs:
  # ============================================================================
  # Backend Tests
  # ============================================================================
  backend-tests:
    name: Backend Tests (Shinra API)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      
      - name: Install dependencies
        run: |
          cd defensive-ops/shinra
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run tests
        run: |
          cd defensive-ops/shinra
          pytest --cov=. --cov-report=xml --cov-report=term
      
      - name: Check coverage
        run: |
          coverage=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('defensive-ops/shinra/coverage.xml'); print(tree.getroot().attrib['line-rate'])")
          echo "Coverage: $coverage"
          if (( $(echo "$coverage < 0.80" | bc -l) )); then
            echo "Coverage below 80% target"
            exit 1
          fi
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: defensive-ops/shinra/coverage.xml

  # ============================================================================
  # Frontend Tests
  # ============================================================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      
      - name: Install dependencies
        working-directory: defensive-ops/frontend
        run: npm ci
      
      - name: Lint
        working-directory: defensive-ops/frontend
        run: npm run lint
      
      - name: Run tests
        working-directory: defensive-ops/frontend
        run: npm test
      
      - name: Build
        working-directory: defensive-ops/frontend
        run: npm run build

  # ============================================================================
  # eBPF Sensors Build
  # ============================================================================
  ebpf-sensors-build:
    name: Build KumoShield Sensors
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          profile: minimal
      
      - name: Install eBPF dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm clang libelf-dev linux-headers-$(uname -r)
      
      - name: Build sensors
        working-directory: defensive-ops/kumoshield/sensors
        run: |
          cargo build --release
      
      - name: Run tests
        working-directory: defensive-ops/kumoshield/sensors
        run: |
          cargo test --release
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: kumoshield-sensors
          path: defensive-ops/kumoshield/sensors/target/release/kumoshield-agent

  # ============================================================================
  # Detection Engine Tests
  # ============================================================================
  detection-tests:
    name: Detection Engine Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install pyyaml pytest
      
      - name: Test Sigma Engine
        run: |
          cd defensive-ops/kumoshield/detection
          python sigma_engine.py
      
      - name: Test YARA Scanner
        run: |
          cd defensive-ops/kumoshield/detection
          python yara_scanner.py
      
      - name: Verify Performance
        run: |
          echo "Checking detection latency < 200ms target..."
          # Verify latency metrics

  # ============================================================================
  # Crawler Performance Tests
  # ============================================================================
  crawler-tests:
    name: Crawler Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install aiohttp beautifulsoup4 pytest
      
      - name: Run performance test
        run: |
          cd defensive-ops/shinra/crawlers
          python http_crawler.py
      
      - name: Check performance target
        run: |
          echo "Target: 1000 pages/minute"
          # Verify crawler performance metrics

  # ============================================================================
  # SBOM Generation with SLSA Attestation
  # ============================================================================
  sbom-slsa:
    name: Generate SBOM & SLSA Attestation
    needs: [backend-tests, frontend-tests, ebpf-sensors-build, detection-tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      
      - name: Generate SBOM
        run: |
          pip install cyclonedx-bom
          cyclonedx-py -o sbom-defensive-ops.json
      
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3
      
      - name: Generate SLSA attestation
        run: |
          echo "Generating SLSA v1.2 attestation..."
          # Generate SLSA provenance
      
      - name: Sign with Cosign
        run: |
          cosign sign-blob --key cosign.key sbom-defensive-ops.json > sbom.sig
      
      - name: Upload to Rekor
        run: |
          echo "Uploading to Rekor transparency log..."
          # rekor-cli upload --artifact sbom-defensive-ops.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-slsa
          path: |
            sbom-defensive-ops.json
            sbom.sig
            slsa-attestation.json

  # ============================================================================
  # Container Build & Scan
  # ============================================================================
  container-build:
    name: Build & Scan Containers
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        run: |
          docker build -t shinra-api:latest defensive-ops/shinra
      
      - name: Build frontend image
        run: |
          docker build -t defensive-frontend:latest defensive-ops/frontend
      
      - name: Scan images with Trivy
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image shinra-api:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image defensive-frontend:latest
      
      - name: Sign images
        run: |
          cosign sign shinra-api:latest
          cosign sign defensive-frontend:latest

  # ============================================================================
  # Security Scans
  # ============================================================================
  security-scans:
    name: Security Scans
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Bandit (Python)
        run: |
          pip install bandit
          bandit -r defensive-ops/shinra defensive-ops/kumoshield/detection
      
      - name: Run Safety (Dependencies)
        run: |
          pip install safety
          safety check
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/typescript
            p/rust

  # ============================================================================
  # Deploy with GitOps (ArgoCD)
  # ============================================================================
  deploy-gitops:
    name: Deploy with ArgoCD
    needs: [sbom-slsa, container-build, security-scans]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Update Kubernetes manifests
        run: |
          cd defensive-ops/infra/k8s
          # Update image tags in manifests
      
      - name: Commit and push
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add defensive-ops/infra/k8s
          git commit -m "chore: update image tags [skip ci]"
          git push
      
      - name: Trigger ArgoCD sync
        run: |
          echo "ArgoCD will automatically sync changes"
          # argocd app sync defensive-platform
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment health..."
          # kubectl rollout status deployment/shinra-api
          # kubectl rollout status deployment/defensive-frontend
