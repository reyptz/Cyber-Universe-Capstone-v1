#!/usr/bin/env python3
"""
Script de d√©monstration des modules VPN & Email s√©curis√©s
Ghost Cyber Universe ‚Äî Capstone v1

Ce script d√©montre toutes les fonctionnalit√©s ajout√©es :
- VPN avanc√© avec WireGuard
- D√©tection de fuites compl√®te
- Obfuscation de trafic
- Multi-hop VPN
- Email s√©curis√© avec multi-providers
- Chiffrement de pi√®ces jointes
- Backup chiffr√©
"""

import asyncio
import json
import os
import sys
from pathlib import Path
import time

# Ajout du chemin
sys.path.append(str(Path(__file__).parent))

try:
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    from rich import print as rprint
    from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn
except ImportError:
    print("‚ö†Ô∏è  Rich non install√©. Installez-le : pip install rich")
    print("Le script continuera sans Rich...\n")
    Console = None

console = Console() if Console else None


def print_section(title: str, emoji: str = "üìã"):
    """Affiche une section"""
    if console:
        console.print(f"\n{emoji} [bold cyan]{title}[/bold cyan]")
        console.print("=" * 60)
    else:
        print(f"\n{emoji} {title}")
        print("=" * 60)


def print_success(message: str):
    """Affiche un message de succ√®s"""
    if console:
        console.print(f"‚úÖ [green]{message}[/green]")
    else:
        print(f"‚úÖ {message}")


def print_info(message: str):
    """Affiche une info"""
    if console:
        console.print(f"‚ÑπÔ∏è  [blue]{message}[/blue]")
    else:
        print(f"‚ÑπÔ∏è  {message}")


def print_warning(message: str):
    """Affiche un avertissement"""
    if console:
        console.print(f"‚ö†Ô∏è  [yellow]{message}[/yellow]")
    else:
        print(f"‚ö†Ô∏è  {message}")


def print_error(message: str):
    """Affiche une erreur"""
    if console:
        console.print(f"‚ùå [red]{message}[/red]")
    else:
        print(f"‚ùå {message}")


async def demo_vpn_wireguard():
    """D√©mo VPN WireGuard"""
    print_section("D√©monstration VPN WireGuard", "üîí")
    
    try:
        from secure_navigation.vpn_advanced import AdvancedVPNManager, WireGuardConfig
        
        print_info("Initialisation du gestionnaire VPN...")
        vpn = AdvancedVPNManager()
        
        # G√©n√©ration de cl√©s
        print_info("G√©n√©ration de cl√©s WireGuard (X25519)...")
        private_key, public_key = vpn.wireguard.generate_keypair()
        
        print_success(f"Cl√© publique g√©n√©r√©e : {public_key[:30]}...")
        print_success(f"Cl√© priv√©e g√©n√©r√©e : {private_key[:30]}...")
        
        # Configuration
        print_info("Cr√©ation de la configuration WireGuard...")
        config = WireGuardConfig(
            private_key=private_key,
            public_key=public_key,
            server_public_key="DEMO_SERVER_PUBLIC_KEY",
            server_endpoint="demo.vpn.example.com",
            server_port=51820,
            allowed_ips="0.0.0.0/0",
            dns_servers=["1.1.1.1", "1.0.0.1"],
            mtu=1420,
            persistent_keepalive=25
        )
        
        print_success("Configuration cr√©√©e avec succ√®s")
        print(f"  ‚Ä¢ Serveur: {config.server_endpoint}:{config.server_port}")
        print(f"  ‚Ä¢ DNS: {', '.join(config.dns_servers)}")
        print(f"  ‚Ä¢ MTU: {config.mtu}")
        
        return vpn
        
    except Exception as e:
        print_error(f"Erreur lors de la d√©mo VPN: {e}")
        return None


async def demo_leak_detection():
    """D√©mo d√©tection de fuites"""
    print_section("D√©tection de Fuites VPN", "üîç")
    
    try:
        from secure_navigation.vpn_advanced import LeakDetector
        
        print_info("Initialisation du d√©tecteur de fuites...")
        detector = LeakDetector()
        
        # IP de test
        test_ip = "203.0.113.1"
        print_info(f"Test avec IP VPN simul√©e: {test_ip}")
        
        # Test complet
        print_info("Ex√©cution des tests de fuites...")
        print("  ‚Ä¢ Test DNS...")
        await asyncio.sleep(0.5)
        print("  ‚Ä¢ Test IPv6...")
        await asyncio.sleep(0.5)
        print("  ‚Ä¢ Test WebRTC...")
        await asyncio.sleep(0.5)
        print("  ‚Ä¢ Test Timestamp...")
        await asyncio.sleep(0.5)
        
        result = await detector.perform_full_leak_test(test_ip)
        
        # Affichage des r√©sultats
        print("\nüìä R√©sultats des tests:")
        print(f"  ‚Ä¢ S√©v√©rit√©: {result.leak_severity.upper()}")
        
        tests = [
            ("DNS Leak", result.dns_leak),
            ("IPv6 Leak", result.ipv6_leak),
            ("WebRTC Leak", result.webrtc_leak),
            ("Timestamp Leak", result.timestamp_leak)
        ]
        
        for test_name, leaked in tests:
            status = "‚ùå FUITE" if leaked else "‚úÖ OK"
            print(f"  ‚Ä¢ {test_name}: {status}")
        
        if result.leak_severity == "none":
            print_success("Aucune fuite d√©tect√©e ! VPN s√©curis√©.")
        else:
            print_warning(f"Fuites d√©tect√©es avec s√©v√©rit√©: {result.leak_severity}")
        
        return result
        
    except Exception as e:
        print_error(f"Erreur lors du test de fuites: {e}")
        return None


async def demo_vpn_metrics():
    """D√©mo m√©triques de performance"""
    print_section("M√©triques de Performance VPN", "üìä")
    
    try:
        from secure_navigation.vpn_advanced import AdvancedVPNManager
        
        print_info("Collecte des m√©triques de performance...")
        vpn = AdvancedVPNManager()
        
        # Collecte des m√©triques
        metrics = await vpn.collect_performance_metrics()
        
        # Affichage
        if console:
            table = Table(title="üìà M√©triques VPN")
            table.add_column("M√©trique", style="cyan")
            table.add_column("Valeur", style="green")
            
            table.add_row("Latence", f"{metrics.latency_ms:.2f} ms")
            table.add_row("Jitter", f"{metrics.jitter_ms:.2f} ms")
            table.add_row("Perte de paquets", f"{metrics.packet_loss_percent:.1f}%")
            table.add_row("Vitesse Download", f"{metrics.download_speed_mbps:.2f} Mbps")
            table.add_row("Vitesse Upload", f"{metrics.upload_speed_mbps:.2f} Mbps")
            table.add_row("Stabilit√©", f"{metrics.connection_stability:.1f}%")
            table.add_row("Overhead", f"{metrics.encryption_overhead_percent:.1f}%")
            
            console.print(table)
        else:
            print("\nüìà M√©triques VPN:")
            print(f"  ‚Ä¢ Latence: {metrics.latency_ms:.2f} ms")
            print(f"  ‚Ä¢ Jitter: {metrics.jitter_ms:.2f} ms")
            print(f"  ‚Ä¢ Perte de paquets: {metrics.packet_loss_percent:.1f}%")
            print(f"  ‚Ä¢ Vitesse Download: {metrics.download_speed_mbps:.2f} Mbps")
            print(f"  ‚Ä¢ Vitesse Upload: {metrics.upload_speed_mbps:.2f} Mbps")
            print(f"  ‚Ä¢ Stabilit√©: {metrics.connection_stability:.1f}%")
            print(f"  ‚Ä¢ Overhead: {metrics.encryption_overhead_percent:.1f}%")
        
        return metrics
        
    except Exception as e:
        print_error(f"Erreur lors de la collecte de m√©triques: {e}")
        return None


async def demo_multihop_vpn():
    """D√©mo VPN multi-hop"""
    print_section("VPN Multi-Hop (Cascade)", "üîó")
    
    try:
        from secure_navigation.vpn_advanced import MultiHopVPN
        
        print_info("Initialisation du gestionnaire multi-hop...")
        multihop = MultiHopVPN()
        
        # Serveurs de d√©monstration
        servers = [
            "switzerland.vpn.example.com",
            "iceland.vpn.example.com",
            "netherlands.vpn.example.com"
        ]
        
        print_info(f"Cr√©ation d'une cha√Æne avec {len(servers)} serveurs...")
        for i, server in enumerate(servers, 1):
            print(f"  {i}. {server}")
        
        # Cr√©ation de la cha√Æne
        chain = await multihop.create_vpn_chain(
            servers=servers,
            protocol="wireguard",
            obfuscation=True
        )
        
        print_success(f"Cha√Æne cr√©√©e avec ID: {chain.chain_id}")
        print(f"  ‚Ä¢ Protocole: {chain.protocol}")
        print(f"  ‚Ä¢ Obfuscation: {'‚úÖ' if chain.obfuscation_enabled else '‚ùå'}")
        print(f"  ‚Ä¢ Nombre de sauts: {len(chain.servers)}")
        
        print_info("Simulation de connexion √† la cha√Æne...")
        success = await multihop.connect_chain(chain)
        
        if success:
            print_success("Connexion multi-hop √©tablie !")
            print_info("Anonymat renforc√© : chaque saut ne conna√Æt que le pr√©c√©dent/suivant")
        
        return chain
        
    except Exception as e:
        print_error(f"Erreur lors de la d√©mo multi-hop: {e}")
        return None


async def demo_email_providers():
    """D√©mo providers email"""
    print_section("Providers Email S√©curis√©s", "üìß")
    
    try:
        from secure_messaging.email_advanced import SecureEmailProviders
        
        print_info("Liste des providers email s√©curis√©s...")
        
        providers = SecureEmailProviders.list_providers(min_privacy_rating=8)
        
        if console:
            table = Table(title="üìß Providers S√©curis√©s")
            table.add_column("Provider", style="cyan")
            table.add_column("Privacy", style="green")
            table.add_column("E2E", style="yellow")
            table.add_column("Description", style="white", width=40)
            
            for provider in providers:
                e2e = "‚úÖ" if provider.supports_e2e else "‚ùå"
                rating = "‚≠ê" * provider.privacy_rating
                
                table.add_row(
                    provider.name,
                    rating,
                    e2e,
                    provider.description[:40] + "..."
                )
            
            console.print(table)
        else:
            print("\nüìß Providers disponibles:")
            for provider in providers:
                e2e = "‚úÖ" if provider.supports_e2e else "‚ùå"
                rating = "‚≠ê" * provider.privacy_rating
                print(f"\n  ‚Ä¢ {provider.name}")
                print(f"    Privacy: {rating} ({provider.privacy_rating}/10)")
                print(f"    E2E: {e2e}")
                print(f"    {provider.description}")
        
        # Meilleur provider
        best = SecureEmailProviders.get_best_provider()
        print_success(f"\nMeilleur provider recommand√©: {best.name} ({best.privacy_rating}/10)")
        
        return providers
        
    except Exception as e:
        print_error(f"Erreur lors de la d√©mo providers: {e}")
        return None


async def demo_attachment_encryption():
    """D√©mo chiffrement de pi√®ce jointe"""
    print_section("Chiffrement de Pi√®ces Jointes", "üîê")
    
    try:
        from secure_messaging.email_advanced import AttachmentEncryptor
        
        print_info("Cr√©ation d'un fichier de test...")
        test_file = Path("demo_document_secret.txt")
        test_content = "Ceci est un document ultra-confidentiel contenant des informations sensibles!"
        
        import aiofiles
        async with aiofiles.open(test_file, 'w') as f:
            await f.write(test_content)
        
        print_success(f"Fichier cr√©√©: {test_file.name} ({len(test_content)} bytes)")
        
        # Chiffrement
        print_info("Chiffrement avec AES-256-GCM + compression...")
        encryptor = AttachmentEncryptor()
        
        attachment = await encryptor.encrypt_file(test_file, compress=True)
        
        print_success("Chiffrement termin√© !")
        print(f"  ‚Ä¢ Fichier: {attachment.filename}")
        print(f"  ‚Ä¢ Taille originale: {attachment.original_size} bytes")
        print(f"  ‚Ä¢ Taille chiffr√©e: {attachment.encrypted_size} bytes")
        print(f"  ‚Ä¢ Compression: {'‚úÖ' if attachment.compressed else '‚ùå'}")
        print(f"  ‚Ä¢ Type MIME: {attachment.mime_type}")
        print(f"  ‚Ä¢ Checksum: {attachment.checksum[:32]}...")
        
        # D√©chiffrement
        print_info("Test de d√©chiffrement...")
        encrypted_file = Path(f"{test_file}.encrypted")
        decrypted_file = Path("demo_document_decrypted.txt")
        
        success = await encryptor.decrypt_file(
            encrypted_file,
            attachment,
            decrypted_file
        )
        
        if success:
            print_success("D√©chiffrement r√©ussi !")
            
            # V√©rification
            async with aiofiles.open(decrypted_file, 'r') as f:
                decrypted_content = await f.read()
            
            if decrypted_content == test_content:
                print_success("Int√©grit√© v√©rifi√©e : contenu identique ‚úì")
            else:
                print_error("Erreur : contenu diff√©rent !")
        
        # Nettoyage
        print_info("Nettoyage des fichiers de test...")
        for f in [test_file, encrypted_file, decrypted_file]:
            if f.exists():
                os.remove(f)
        
        return attachment
        
    except Exception as e:
        print_error(f"Erreur lors du chiffrement: {e}")
        return None


async def demo_email_backup():
    """D√©mo backup email"""
    print_section("Backup Chiffr√©", "üíæ")
    
    try:
        from secure_messaging.email_advanced import BackupManager
        
        print_info("Initialisation du gestionnaire de backup...")
        backup_mgr = BackupManager("demo_backups")
        
        # Donn√©es de test
        test_data = {
            "user": "alice@protonmail.com",
            "emails_sent": 42,
            "contacts": ["bob@example.com", "charlie@example.com"],
            "settings": {
                "encryption": "AES-256-GCM",
                "auto_delete": True,
                "backup_frequency": "daily"
            }
        }
        
        print_info("Cr√©ation d'un backup chiffr√©...")
        recovery_password = "demo_ultra_secure_password_123"
        
        bundle = await backup_mgr.create_backup(test_data, recovery_password)
        
        print_success("Backup cr√©√© !")
        print(f"  ‚Ä¢ Bundle ID: {bundle.bundle_id}")
        print(f"  ‚Ä¢ Date: {time.ctime(bundle.created_at)}")
        print(f"  ‚Ä¢ Hash cl√©: {bundle.recovery_key_hash[:32]}...")
        print(f"  ‚Ä¢ Version: {bundle.version}")
        
        # Test de restauration
        print_info("Test de restauration...")
        restored_data = await backup_mgr.restore_backup(
            bundle.bundle_id,
            recovery_password
        )
        
        if restored_data:
            print_success("Restauration r√©ussie !")
            print(f"  ‚Ä¢ User: {restored_data['user']}")
            print(f"  ‚Ä¢ Emails: {restored_data['emails_sent']}")
            print(f"  ‚Ä¢ Contacts: {len(restored_data['contacts'])}")
        
        # Nettoyage
        print_info("Suppression du backup de test...")
        await backup_mgr.delete_backup(bundle.bundle_id)
        
        return bundle
        
    except Exception as e:
        print_error(f"Erreur lors du backup: {e}")
        return None


async def demo_full_workflow():
    """D√©mo compl√®te du workflow"""
    print_section("Workflow Complet", "üéØ")
    
    try:
        from secure_navigation.vpn_advanced import AdvancedVPNManager
        from secure_messaging.email_advanced import AdvancedEmailManager
        
        print_info("Sc√©nario : Envoi d'un email confidentiel via VPN s√©curis√©")
        print()
        
        # √âtape 1 : VPN
        print("üìç √âtape 1 : Connexion VPN s√©curis√©e")
        vpn = AdvancedVPNManager()
        private_key, public_key = vpn.wireguard.generate_keypair()
        print_success("VPN initialis√©")
        
        # √âtape 2 : Test de fuites
        print("\nüìç √âtape 2 : V√©rification des fuites")
        leak_result = await vpn.leak_detector.perform_full_leak_test("203.0.113.1")
        if leak_result.leak_severity == "none":
            print_success("Aucune fuite : connexion s√©curis√©e")
        else:
            print_warning(f"Fuites d√©tect√©es : {leak_result.leak_severity}")
        
        # √âtape 3 : Email
        print("\nüìç √âtape 3 : Pr√©paration de l'email s√©curis√©")
        email_mgr = AdvancedEmailManager("protonmail")
        print_success("Email manager configur√© avec ProtonMail")
        
        # √âtape 4 : Statistiques
        print("\nüìç √âtape 4 : Statistiques")
        stats = email_mgr.get_statistics()
        print(f"  ‚Ä¢ Provider: {stats['provider']}")
        print(f"  ‚Ä¢ Privacy Rating: {stats['privacy_rating']}/10")
        
        print_success("\n‚úÖ Workflow complet d√©montr√© avec succ√®s !")
        
    except Exception as e:
        print_error(f"Erreur lors du workflow: {e}")


async def main():
    """Fonction principale"""
    
    # Header
    if console:
        header = """
[bold cyan]‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  Ghost Cyber Universe ‚Äî VPN & Email S√©curis√©s Demo       ‚ïë
‚ïë  Capstone v1 ‚Äî Contribution 2025                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù[/bold cyan]
        """
        console.print(header)
    else:
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  Ghost Cyber Universe ‚Äî VPN & Email S√©curis√©s Demo       ‚ïë
‚ïë  Capstone v1 ‚Äî Contribution 2025                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """)
    
    print_info("D√©monstration de toutes les fonctionnalit√©s ajout√©es\n")
    
    try:
        # Menu
        demos = [
            ("VPN WireGuard", demo_vpn_wireguard),
            ("D√©tection de Fuites", demo_leak_detection),
            ("M√©triques VPN", demo_vpn_metrics),
            ("Multi-Hop VPN", demo_multihop_vpn),
            ("Providers Email", demo_email_providers),
            ("Chiffrement de Pi√®ces Jointes", demo_attachment_encryption),
            ("Backup Chiffr√©", demo_email_backup),
            ("Workflow Complet", demo_full_workflow)
        ]
        
        print("üìã D√©monstrations disponibles:\n")
        for i, (name, _) in enumerate(demos, 1):
            print(f"  {i}. {name}")
        
        print("\n  0. Ex√©cuter toutes les d√©mos")
        print("  q. Quitter")
        
        choice = input("\n‚û§ Choisissez une option (0-8, q): ").strip()
        
        if choice.lower() == 'q':
            print_info("Fermeture de la d√©mo...")
            return
        
        if choice == '0':
            # Toutes les d√©mos
            for name, demo_func in demos:
                await demo_func()
                print()
        else:
            # D√©mo sp√©cifique
            try:
                idx = int(choice) - 1
                if 0 <= idx < len(demos):
                    name, demo_func = demos[idx]
                    await demo_func()
                else:
                    print_error("Choix invalide!")
            except ValueError:
                print_error("Entr√©e invalide!")
        
        # Footer
        print_section("D√©mo termin√©e", "‚úÖ")
        print_info("Pour plus d'informations, consultez:")
        print("  ‚Ä¢ docs/CONTRIBUTION_VPN_EMAIL.md")
        print("  ‚Ä¢ secure-navigation/README_VPN_EMAIL.md")
        print("  ‚Ä¢ CONTRIBUTION_SUMMARY.md")
        
    except KeyboardInterrupt:
        print_info("\n\nD√©mo interrompue par l'utilisateur")
    except Exception as e:
        print_error(f"Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())

